import pygame
import random
import math
pygame.init()


class DrawInformation:
    BLACK = 0, 0, 0
    WHITE = 255, 255, 255
    GREEN = 0, 255, 0
    RED = 255, 0, 0
    GREY = 128, 128, 128
    BACKGROUND_COLOR = WHITE
    SIDE_PAD = 100
    TOP_PAD = 150

    GRADIENTS = [
        GREY,
        (160, 160, 160),
        (192, 192, 192)
    ]

    FONT = pygame.font.SysFont("Roboto Slab",25)
    LARGE_FONT = pygame.font.SysFont("Roboto Slab",40)

    def __init__(self, width, height, lst):
        self.width = width
        self.height = height
        self.window = pygame.display.set_mode((width, height))
        pygame.display.set_caption("Sorting Algorithm Visualizer")
        self.set_list(lst)

    def set_list(self, lst):
        self.lst = lst
        self.max_val = max(lst)
        self.min_val = min(lst)

        self.block_width = math.floor((self.width - self.SIDE_PAD) / len(lst))
        self.block_height = math.floor((self.height - self.TOP_PAD) / (self.max_val - self.min_val))
        self.start_x = self.SIDE_PAD // 2

def draw(draw_info, algo_name, ascending):
    draw_info.window.fill(draw_info.BACKGROUND_COLOR)

    title = draw_info.LARGE_FONT.render(f"{algo_name} - {'Ascending' if ascending else 'Descending'}", 1,
                                  draw_info.BLACK)
    draw_info.window.blit(title,
                          (draw_info.width / 2 - title.get_width() / 2, 5))

    controls = draw_info.FONT.render("R - Reset | SPACE - Start Sorting |"
                                     "A - Ascending | D - Descending", 1,
                                     draw_info.BLACK)
    draw_info.window.blit(controls,(draw_info.width/2 - controls.get_width()/2, 55))

    sorting = draw_info.FONT.render("I - Insertion | B - Bubble Sort | S - Selection Sort"
                                    " | M - Merge Sort | Q - Quick Sort", 1,
                                    draw_info.BLACK)
    draw_info.window.blit(sorting,(draw_info.width/2 - sorting.get_width()/2, 85))

    draw_list(draw_info)
    pygame.display.update()

def draw_list(draw_info, color_positions = {}, clear_bg = False):
    lst = draw_info.lst

    if clear_bg:
        clear_rect = (draw_info.SIDE_PAD//2, draw_info.TOP_PAD, draw_info.width - draw_info.SIDE_PAD,
                      draw_info.height - draw_info.TOP_PAD)
        pygame.draw.rect(draw_info.window, draw_info.BACKGROUND_COLOR,
                         clear_rect)

    for i, val in enumerate(lst):
        x = draw_info.start_x + i * draw_info.block_width
        y = draw_info.height - (val - draw_info.min_val) * draw_info.block_height

        color = draw_info.GRADIENTS[i % 3]

        if i in color_positions:
            color = color_positions[i]

        pygame.draw.rect(draw_info.window, color, (x, y, draw_info.block_width, draw_info.height))

    if clear_bg:
        pygame.display.update()


def generate_starting_list(n, min_val, max_val):
    lst = []

    for i in range(n):
        val = random.randint(min_val, max_val)
        lst.append(val)

    return lst

def bubble_sort(draw_info, clock, ascending = True):
    lst = draw_info.lst

    for i in range(len(lst)-1):
        for j in range(len(lst)-1-i):
            num1 = lst[j]
            num2 = lst[j+1]

            if (num1 > num2 and ascending) or (num1 < num2 and not ascending):
                lst[j], lst[j+1] = lst[j+1], lst[j]
                draw_list(draw_info,{j : draw_info.GREEN, j+1 :draw_info.RED}, True)
                yield True
    return lst

def selection_sort(draw_info, clock, ascending = True):
    lst = draw_info.lst
    size = len(lst)

    for step in range(size):

        min_idx = step
        for i in range(step + 1, size):
            # to sort in descending order, change > to < in this line
            # select the minimum element in each loop
            yield True
            draw_list(draw_info, {min_idx: draw_info.GREEN, i: draw_info.RED},
                      True)
            if (lst[i] < lst[min_idx] and ascending) or (lst[i] > lst[min_idx] and not ascending):
                min_idx = i

        # put min at the correct position
        (lst[step], lst[min_idx]) = (lst[min_idx], lst[step])

    return lst

def insertion_sort(draw_info, clock, ascending = True):
    lst = draw_info.lst

    for i in range(1, len(lst)):
        current = lst[i]
        while True:
            ascending_sort = i > 0 and lst[i-1] > current and ascending
            descending_sort = i > 0 and lst[i-1] < current and not ascending
            if not ascending_sort and not descending_sort:
                break
            lst[i] = lst[i-1]
            i = i -1
            lst[i] = current
            draw_list(draw_info, {i - 1:draw_info.GREEN, i: draw_info.RED}, True)
            yield True

def merge_sort(draw_info, clock, ascending = True):
    lst = draw_info.lst

    def merge_sort_alg(data, left, right, clock):
        # tambahan
        draw_list(draw_info, {left: draw_info.GREEN, right: draw_info.RED}, True)
        clock.tick(60)
        if left < right:
            middle = (left + right) // 2
            merge_sort_alg(data, left, middle, clock)
            merge_sort_alg(data, middle + 1, right, clock)
            merge(data, left, middle, right, clock)

    def merge(data, left, middle, right, clock):
        draw_list(draw_info, {left: draw_info.GREEN, right: draw_info.RED}, True)
        clock.tick(60)
        leftPart = data[left:middle + 1]
        rightPart = data[middle + 1: right + 1]
        leftIdx = rightIdx = 0
        for dataIdx in range(left, right + 1):
            draw_list(draw_info, {left: draw_info.GREEN, right: draw_info.RED},
                      True)
            clock.tick(60)
            if leftIdx < len(leftPart) and rightIdx < len(rightPart):
                if (leftPart[leftIdx] <= rightPart[rightIdx] and ascending) or \
                        (leftPart[leftIdx] >= rightPart[rightIdx] and not ascending):
                    data[dataIdx] = leftPart[leftIdx]
                    leftIdx += 1
                else:
                    data[dataIdx] = rightPart[rightIdx]
                    rightIdx += 1
            elif leftIdx < len(leftPart):
                data[dataIdx] = leftPart[leftIdx]
                leftIdx += 1
            else:
                data[dataIdx] = rightPart[rightIdx]
                rightIdx += 1

    return merge_sort_alg(lst, 0, len(lst)-1, clock)
    yield True

def quick_sort(draw_info, clock, ascending = True):
    lst = draw_info.lst
    
    def partition(array, low, high):
        # choose the rightmost element as pivot
        pivot = array[high]
        # pointer for greater element
        i = low - 1
        # traverse through all elements
        # compare each element with pivot
        for j in range(low, high):
            clock.tick(60)
            draw_list(draw_info, {i: draw_info.GREEN, j: draw_info.RED}, True)
            if (array[j] <= pivot and ascending) or (array[j] >= pivot and not ascending):
                # if element smaller than pivot is found
                # swap it with the greater element pointed by i
                i = i + 1
                # swapping element at i with element at j
                (array[i], array[j]) = (array[j], array[i])
                draw_list(draw_info, {i: draw_info.GREEN, j: draw_info.RED}, True)
        # swap the pivot element with the greater element specified by i
        (array[i + 1], array[high]) = (array[high], array[i + 1])
        clock.tick(60)
        draw_list(draw_info, {i: draw_info.GREEN, i+1: draw_info.RED}, True)
        # return the position from where partition is done
        return i + 1


    def quickSort(array, low, high):
        yield True
        if low < high:

            # find pivot element such that
            # element smaller than pivot are on the left
            # element greater than pivot are on the right
            pi = partition(array, low, high)
            draw_list(draw_info, {low:draw_info.GREEN, high:draw_info.RED}, True)
            # recursive call on the left of pivot
            yield from quickSort(array, low, pi - 1)
            # recursive call on the right of pivot
            yield from quickSort(array, pi + 1, high)
    size = len(lst)
    yield from quickSort(lst, 0, size - 1)


def main():
    run = True
    clock = pygame.time.Clock()

    n = 50
    min_val = 0
    max_val = 100
    sorting = False
    ascending = True

    lst = generate_starting_list(n, min_val, max_val)
    draw_info = DrawInformation(800, 600, lst)

    sorting_algorithm = bubble_sort
    sorting_algo_name = "Bubble Sort"
    sorting_algo_generator = None

    while run:
        clock.tick(10)
        pygame.display.update()
        if sorting:
            try:
                next(sorting_algo_generator)
            except StopIteration:
                sorting = False
        else:
            draw(draw_info, sorting_algo_name, ascending)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type != pygame.KEYDOWN:
                continue
            if event.key == pygame.K_r:
                lst = generate_starting_list(n, min_val, max_val)
                draw_info.set_list(lst)
                sorting = False
            elif event.key == pygame.K_SPACE and sorting == False:
                sorting = True
                sorting_algo_generator = sorting_algorithm(draw_info, clock, ascending)
            elif event.key == pygame.K_a and not sorting:
                ascending = True
            elif event.key == pygame.K_d and not sorting:
                ascending = False
            elif event.key == pygame.K_i and not sorting:
                sorting_algorithm = insertion_sort
                sorting_algo_name = "Insertion Sort"
            elif event.key == pygame.K_b and not sorting:
                sorting_algorithm = bubble_sort
                sorting_algo_name = "Bubble Sort"
            elif event.key == pygame.K_s and not sorting:
                sorting_algorithm = selection_sort
                sorting_algo_name = "Selection Sort"
            elif event.key == pygame.K_m and not sorting:
                sorting_algorithm = merge_sort
                sorting_algo_name = "Merge Sort"
            elif event.key == pygame.K_q and not sorting:
                sorting_algorithm = quick_sort
                sorting_algo_name = "Quick Sort"

    pygame.quit()

if __name__ == "__main__":
    main()
